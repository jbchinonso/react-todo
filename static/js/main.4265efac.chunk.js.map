{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","items","update","deleteItem","todos","map","todo","className","key","type","value","text","id","onChange","e","target","icon","onClick","duration","easing","library","add","faTrash","App","props","addItem","preventDefault","newItem","state","currentItem","push","setState","forEach","filteredItem","filter","item","handleInput","bind","this","Date","now","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA+CeA,MA1Cf,YAA8C,IAA1BC,EAAyB,EAAzBA,MAAMC,EAAmB,EAAnBA,OAAOC,EAAY,EAAZA,WAEvBC,EAAQH,EAAMI,KAAI,SAAAC,GACpB,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACAC,KAAK,OACLF,UAAU,YACVG,MAAQJ,EAAKK,KACbC,GAAKN,EAAKE,IACVK,SACI,SAACC,GACGZ,EAAOY,EAAEC,OAAOL,MAAOJ,EAAKE,QAIpC,0BAAMD,UAAU,UACZ,kBAAC,IAAD,CACAS,KAAK,QACLC,QACI,SAACH,GACGX,EAAWG,EAAKE,aASxC,OACI,6BACI,kBAAC,IAAD,CAAUU,SAAU,IAAKC,OAAO,eAC3Bf,K,eChCjBgB,IAAQC,IAAIC,K,IA2FGC,E,YAvFb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAuBTC,QAAU,SAACX,GACRA,EAAEY,iBACF,IAAMC,EAAW,EAAKC,MAAMC,YACX,KAAfF,EAAQhB,OACV,EAAKiB,MAAM3B,MAAM6B,KAAKH,GACtB,EAAKI,SAAS,CACZF,YAAY,CACVlB,KAAM,GACNH,IAAI,QAhCQ,EAuClBN,OAAS,SAACQ,EAAMF,GACd,IAAMP,EAAQ,EAAK2B,MAAM3B,MACzBA,EAAM+B,SAAQ,SAAA1B,GACPA,EAAKE,MAAMA,IACdF,EAAKK,KAAOD,MAKhB,EAAKqB,SAAS,CACZ9B,MAAOA,KAjDO,EAqDlBE,WAAa,SAACK,GACZ,IACMyB,EADQ,EAAKL,MAAM3B,MACEiC,QAAO,SAAAC,GAChC,OAAOA,EAAK3B,MAAQA,KAGtB,EAAKuB,SAAS,CACZ9B,MAAMgC,KA1DR,EAAKL,MAAQ,CACX3B,MAAO,GACP4B,YAAa,CACXlB,KAAM,GACNH,IAAK,KAGT,EAAK4B,YAAc,EAAKA,YAAYC,KAAjB,gBATH,E,yEAcNvB,GACVwB,KAAKP,SAAS,CACZF,YAAY,CACVlB,KAAOG,EAAEC,OAAOL,MAChBF,IAAM+B,KAAKC,W,+BA+Cf,OACE,yBAAKjC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,eAAf,mBACA,0BAAMK,GAAG,YAAW6B,SAAUH,KAAKb,SACjC,2BAAOhB,KAAK,OAAOiC,YAAY,kBAC/BhC,MAAO4B,KAAKV,MAAMC,YAAYlB,KAC9BE,SAAUyB,KAAKF,cACf,2BAAO3B,KAAK,SAASC,MAAM,MAAMO,QAASqB,KAAKb,YAGnD,kBAAC,EAAD,CACCxB,MAASqC,KAAKV,MAAM3B,MACpBC,OAAUoC,KAAKpC,OACfC,WAAcmC,KAAKnC,kB,GAjFVwC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4265efac.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nfunction ListItems({items,update,deleteItem}){\r\n    \r\n    const todos = items.map(todo =>{\r\n        return(\r\n            <div className=\"list\" key={todo.key}>\r\n                <input \r\n                type=\"text\" \r\n                className=\"listInput\" \r\n                value= {todo.text}\r\n                id ={todo.key}\r\n                onChange={\r\n                    (e)=>{\r\n                        update(e.target.value, todo.key)\r\n                    }\r\n                }\r\n                />\r\n                <span className='faicon' >\r\n                    <FontAwesomeIcon \r\n                    icon='trash'\r\n                    onClick={\r\n                        (e)=>{\r\n                            deleteItem(todo.key)}\r\n                        }\r\n                     />\r\n                </span>\r\n                \r\n            </div>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <FlipMove duration={500} easing='ease-in-out'>\r\n                {todos}\r\n            </FlipMove>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ListItems;\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash)\n\nclass App extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\"\n      }\n    }\n    this.handleInput = this.handleInput.bind(this)\n  }\n\n \n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text : e.target.value,\n        key : Date.now()\n      }\n      \n    })\n  }\n\n addItem = (e)=>{\n    e.preventDefault();\n    const newItem  = this.state.currentItem\n   if(newItem.text!==\"\"){\n    this.state.items.push(newItem)\n    this.setState({\n      currentItem:{\n        text: \"\",\n        key:\"\"\n      }\n    })\n   }\n       \n  }\n\n  update = (value,key)=>{\n    const items = this.state.items; \n    items.forEach(todo => {\n        if(todo.key===key){\n        todo.text = value\n      }\n  \n    })\n\n    this.setState({\n      items: items\n    })\n  }\n\n  deleteItem = (key) =>{\n    const items = this.state.items;\n    const filteredItem = items.filter(item =>{\n      return(item.key !== key)\n    })\n\n    this.setState({\n      items:filteredItem\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"header-text\">Daily Todo Note</div>\n          <form id=\"todo-form\"onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Enter Your todo\" \n            value={this.state.currentItem.text}\n            onChange={this.handleInput} />\n            <input type=\"submit\" value=\"Add\" onClick={this.addItem}/>\n          </form>\n        </header>\n        <ListItems\n         items = {this.state.items}\n         update = {this.update}\n         deleteItem = {this.deleteItem}\n         ></ListItems>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}